{"version":3,"sources":["serviceWorker.ts","theme/Nav.tsx","theme/Link.tsx","theme/Content.tsx","theme/Highlight.ts","theme/Code.tsx","pages/Di.tsx","pages/Home.tsx","components/App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Nav","styled","nav","Link","NavLink","Content","div","color","x","cekta","hljs","display","overflowX","padding","background","Code","children","language","props","style","Di","Layout","path","to","GettingStarted","Home","target","href","App","Container","exact","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6db2ad06.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import styled from \"styled-components\"\n\nexport const Nav = styled.nav`\n  flex-direction: column;\n  background: var(--primary-color);\n  padding: 20px;\n  display: flex;\n  height: 100vh;\n  z-index: 10;\n`\n","import styled from \"styled-components\"\nimport { NavLink } from \"react-router-dom\"\n\nexport const Link = styled(NavLink)`\n  padding: 12px 18px;\n  margin-bottom: 10px;\n  font-size: 120%;\n  text-decoration: none;\n  color: inherit;\n  border-radius: 6px;\n\n  &.active {\n    background: #7771;\n  }\n\n  &:hover,\n  &:focus {\n    text-decoration: none;\n  }\n`\n","import styled from \"styled-components\"\n\nexport const Content = styled.div`\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n  &::-webkit-scrollbar {\n    width: 0;\n  }\n\n  padding: 24px 32px;\n  max-height: 100vh;\n  overflow: auto;\n`\n","const color = (x: string) => ({ color: x })\n\nexport const cekta = {\n  hljs: {\n    display: \"block\",\n    overflowX: \"auto\",\n    padding: \"0.6em\",\n    background: \"#1b1b1b\",\n    color: \"#cecece\"\n  },\n  \"hljs-strong\": color(\"#a8a8a2\"),\n  \"hljs-emphasis\": color(\"#a8a8a2\"),\n  \"hljs-bullet\": color(\"#6896ba\"),\n  \"hljs-quote\": color(\"#6896ba\"),\n  \"hljs-link\": color(\"#6896ba\"),\n  \"hljs-number\": color(\"#6896ba\"),\n  \"hljs-regexp\": color(\"#6896ba\"),\n  \"hljs-literal\": color(\"#6896ba\"),\n  \"hljs-code\": color(\"#a6e22e\"),\n  \"hljs-selector-class\": color(\"#a6e22e\"),\n  \"hljs-keyword\": color(\"#cb7832\"),\n  \"hljs-selector-tag\": color(\"#cb7832\"),\n  \"hljs-section\": color(\"#cb7832\"),\n  \"hljs-attribute\": color(\"#cb7832\"),\n  \"hljs-name\": color(\"#cb7832\"),\n  \"hljs-variable\": color(\"#cb7832\"),\n  \"hljs-params\": color(\"#b9b9b9\"),\n  \"hljs-string\": color(\"#739a5f\"),\n  \"hljs-subst\": color(\"#e0c46c\"),\n  \"hljs-type\": color(\"#e0c46c\"),\n  \"hljs-built_in\": color(\"#e0c46c\"),\n  \"hljs-builtin-name\": color(\"#e0c46c\"),\n  \"hljs-symbol\": color(\"#e0c46c\"),\n  \"hljs-selector-id\": color(\"#e0c46c\"),\n  \"hljs-selector-attr\": color(\"#e0c46c\"),\n  \"hljs-selector-pseudo\": color(\"#e0c46c\"),\n  \"hljs-template-tag\": color(\"#e0c46c\"),\n  \"hljs-template-variable\": color(\"#e0c46c\"),\n  \"hljs-addition\": color(\"#e0c46c\"),\n  \"hljs-comment\": color(\"#7f7f7f\"),\n  \"hljs-deletion\": color(\"#7f7f7f\"),\n  \"hljs-meta\": color(\"#7f7f7f\")\n}\n","import SyntaxHighlighter, {\n  SyntaxHighlighterProps\n} from \"react-syntax-highlighter\"\nimport { cekta } from \"./Highlight\"\nimport * as React from \"react\"\n\nexport const Code: React.FC<SyntaxHighlighterProps> = ({\n  children,\n  language = \"php\",\n  ...props\n}) => {\n  return (\n    <SyntaxHighlighter language={language} {...props} style={cekta}>\n      {children}\n    </SyntaxHighlighter>\n  )\n}\n","import * as React from \"react\"\nimport { Route, Switch } from \"react-router-dom\"\nimport styled from \"styled-components\"\nimport { Nav } from \"../theme/Nav\"\nimport { Link } from \"../theme/Link\"\nimport { Content } from \"../theme/Content\"\nimport { Code } from \"../theme/Code\"\n\nexport const Di = () => {\n  return (\n    <Layout>\n      <Content>\n        Table of contents\n        <div>---</div>\n        <Switch>\n          <Route path=\"/di/gettig-started\">\n            <GettingStarted />\n          </Route>\n        </Switch>\n      </Content>\n\n      <Nav>\n        <Link to=\"/di/gettig-started\">Начало</Link>\n      </Nav>\n    </Layout>\n  )\n}\n\nconst Layout = styled.div`\n  display: grid;\n  grid-template: 1fr / 1fr 20%;\n`\n\nconst GettingStarted = () => (\n  <>\n    <h2>Установка используя composer</h2>\n    <p>\n      <Code language=\"bash\">$ composer require cekta/di</Code>\n    </p>\n    <h2>Использование</h2>\n    <p>Рассмотрим ситуацию:</p>\n    <ul>\n      <li>\n        Необходимо сделать AuthHandler для входа на сайт по username и password.\n      </li>\n      <li>AuthHandler для работы с БД будет использовать PDO для примера.</li>\n      <li>\n        Параметры для подключения к бд будут лежать в config.json для примера.\n      </li>\n    </ul>\n    <p>/public/index.php - основная точка входа для демонстрации работы</p>\n    <Code language=\"php\">\n      {`\n<?php\n\ndeclare(strict_types=1);\n\nuse App\\\\AuthHandler;\nuse App\\\\MyContainer;\n\nrequire __DIR__ . '/../vendor/autoload.php';\n\n$container = new MyContainer();\n$auth = $container->get(AuthHandler::class);\nvar_dump($auth->handle('test', '12345'));\n`}\n    </Code>\n    <p>\n      /src/MyContainer.php - здесь лежит основная настройка иньекции\n      зависимостей\n    </p>\n    <Code>{`\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App;\n\nuse Cekta\\\\DI\\\\Container;\nuse Cekta\\\\DI\\\\Provider;\nuse Cekta\\\\DI\\\\Reflection;\n\nclass MyContainer extends Container\n{\n    public function __construct()\n    {\n        $reflection = new Reflection();\n        $providers[] = new Provider\\\\KeyValue(\n            json_decode(file_get_contents(__DIR__ . '/../config.json'), true)\n        );\n        $providers[] = new Provider\\\\Autowiring($reflection);\n        parent::__construct(...$providers);\n    }\n}\n      `}</Code>\n  </>\n)\n","import * as React from \"react\"\nimport { Content } from \"../theme/Content\"\n\nexport const Home = () => {\n  return (\n    <Content>\n      <h1>CEKTA</h1>\n      <p>Группа людей занимающихся разработкой програмного обеспечения</p>\n      <h1>Общение</h1>\n      <ul>\n        <li>\n          <a target=\"_blank\" href=\"https://t.me/dev_ru\">\n            Telegram chat\n          </a>\n        </li>\n        <li>\n          <a target=\"_blank\" href=\"https://www.youtube.com/c/EvgeniyKuvshinov\">\n            YouTube\n          </a>\n        </li>\n        <li>\n          <a target=\"_blank\" href=\"https://github.com/cekta/cekta/issues/new\">\n            Ваши предложения\n          </a>\n        </li>\n      </ul>\n    </Content>\n  )\n}\n","import React from \"react\"\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\"\nimport { Di } from \"../pages/Di\"\nimport { Home } from \"../pages/Home\"\nimport styled from \"styled-components\"\nimport { Link } from \"../theme/Link\"\nimport { Nav } from \"../theme/Nav\"\n\nexport const App = () => {\n  return (\n    <Router>\n      <Container>\n        <Nav>\n          <Link to=\"/\" exact>\n            Главная\n          </Link>\n          <Link to=\"/di\">di</Link>\n        </Nav>\n\n        <Switch>\n          <Route path=\"/di\">\n            <Di />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n  )\n}\n\nconst Container = styled.div`\n  grid-template: 1fr / 18% 1fr;\n  display: grid;\n\n  animation: slide-in 625ms cubic-bezier(0.22, 0.54, 0.24, 1);\n  @keyframes slide-in {\n    from {\n      transform: translateY(100%);\n    }\n    to {\n      transform: translateY(0);\n    }\n  }\n`\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"normalize.css\"\nimport \"style.css\"\nimport \"./index.css\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nimport { App } from \"./components/App\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\nserviceWorker.register()\n"],"sourceRoot":""}